Please answer the below core-java Questions:

# What is programing language?
A.
A programming language is a computer language that is used by programmers (developers) to communicate with computers.
It is a set of instructions written in any specific language ( C, C++, Java, Python) to perform a specific task.
A programming language is mainly used to develop desktop applications, websites, and mobile applications.

# What jdk contains or composed of and define each components?
A.
The JDK includes the Java Runtime Environment (JRE),
an interpreter (java), a compiler (javac), an archiver (jar),
a documentation generator (javadoc), and some other development tools.
The Java Runtime Environment itself consists of the Java Virtual Machine (JVM), supporting files, and core classes.

# What is IDE?
A.
An integrated development environment (IDE) is software for building applications
that combines common developer tools into a single graphical user interface (GUI).

# What are the IDEs available in the market to support java?
A.
1 . Visual Studio.
2 . IntelliJ IDEA.
3 . Eclipse.
4 . Xcode.
5 . NetBeans.
6 . AWS Cloud9.
7 . Amazon Corretto.
8 . Oracle JDeveloper.


# Explain the entire java life cycle.
A.
There are three main stages in the life cycle of a java program. They are:

1 . Editing the program
2 . Compiling the source code
3 . Executing the byte code

First, you will start with typing the program in a text-editor (ex: notepad, notepad++, wordpad, textedit etc).
After completing editing of the program, we have to save the file.
While saving the file you should remember that the file must be saved with .java extension.
For example, let’s think that I had written a Java program which contains a single class Sample (more on classes in
future posts).
It is a good convention to save the file with the name of the class. So, as per my example, the file will be saved as
Sample.java.

Second step is compilation. The name of the Java compiler is javac.
The input to the compiler is Java source code which is available in Sample.java.
The output of the compiler is machine independent or platform independent code which is known as bytecode.
The file which is generated after compilation is .class file. As per my example, the bytecode file will be Sample.class.

Last step is execution. The bytecode generated by the compiler will be executed by Java Virtual Machine (JVM).
Input to the JVM is bytecode and output is machine code (0’s and 1’s) which will be executed by the CPU
of the local machine.


# what is class?
A.
A class is a user defined blueprint or prototype from which objects are created.
It represents the set of properties or methods that are common to all objects of one type.
In general, class declarations can include these components, in order:

Modifiers: A class can be public or has default access (Refer this for details).

class keyword: class keyword is used to create a class.

Class name: The name should begin with an initial letter (capitalized by convention).

Superclass(if any): The name of the class’s parent (superclass), if any, preceded by the keyword extends.
A class can only extend (subclass) one parent.

Interfaces(if any): A comma-separated list of interfaces implemented by the class,
if any, preceded by the keyword implements.
A class can implement more than one interface.

Body: The class body surrounded by braces, { }.

Constructors are used for initializing new objects. Fields are variables that provides the state of the class and
its objects,
and methods are used to implement the behavior of the class and its objects.
There are various types of classes that are used in real time applications such as nested classes, anonymous classes,
lambda expressions.


# What is object?
A.
A Java object is a member (also called an instance) of a Java class.
Each object has an identity, a behavior and a state.
The state of an object is stored in fields (variables), while methods (functions) display the object's behavior.
Objects are created at runtime from templates, which are also known as classes.

# An object consists of :

State: It is represented by attributes of an object. It also reflects the properties of an object.
Behavior: It is represented by methods of an object. It also reflects the response of an object with other objects.
Identity: It gives a unique name to an object and enables one object to interact with other objects.



# What is the entry point of an application?
A.

An application entry point identifies a resource that is an access point to an application.
Application entry points are used to control users' access to different versions of an application that is deployed
on a platform.

The main method is the entry point of a Java application.


# Why main is static?

Java main() method is always static, so that compiler can call it without the creation of an object
or before the creation of an object of the class.
In any Java program, the main() method is the starting point from where compiler starts program execution.

This also saves the unnecessary wastage of memory which would have been used by the object declared only for calling
the main() method by the JVM.




# Which class is the superclass of all classes?
A.
Object class is the root or superclass of the class hierarchy, which is present in java.

All classes in Java by default "extend" the Object class, that's why Object is superclass of every class in Java.
As per the definition of class "Object". Class Object is the root of the class hierarchy.
Every class has Object as a superclass.


# What is difference between path and classpath variables?

A.
PATH − The path environment variable is used to specify the set of directories which contains executional programs.

When you try to execute a program from command line, the operating system searches for the specified program
in the current directly, if available, executes it.

In case the programs are not available in the current directory, operating system verifies in the set of directories
specified in the ‘PATH ’ environment variable.

CLASSPATH − The class path environment variable is used to specify the location of the classes and packages.

When we try to import classes and packages other that those that are available with Java Standard Library.

JVM verifies the current directly for them, if not available it verifies the set of directories specified in
the ‘CLASSPATH’ environment variable.



# What is the difference between an Interface and Abstract class?
Abstract class and interface both are used to achieve abstraction where we can declare the abstract methods.
Abstract class and interface both can't be instantiated.

But there are many differences between abstract class and interface that are given below.

Abstract class	Interface
1) Abstract class can have abstract and non-abstract methods.	Interface can have only abstract methods. Since Java 8,
it can have default and static methods also.
2) Abstract class doesn't support multiple inheritance.	Interface supports multiple inheritance.
3) Abstract class can have final, non-final, static and non-static variables.	Interface has only static and final
variables.
4) Abstract class can provide the implementation of interface.	Interface can't provide the implementation of abstract
class.
5) The abstract keyword is used to declare abstract class.	The interface keyword is used to declare interface.
6) An abstract class can extend another Java class and implement multiple Java interfaces.	An interface can extend
another Java interface only.
7) An abstract class can be extended using keyword "extends".	An interface can be implemented using
keyword "implements".
8) A Java abstract class can have class members like private, protected, etc.	Members of a Java interface are public
by default.
9)Example:
public abstract class Shape{
public abstract void draw();
}	Example:
public interface Drawable{
void draw();
}
Simply, abstract class achieves partial abstraction (0 to 100%) whereas interface achieves fully abstraction (100%).



# Can you make an Object from an Interface and Abstract class ? if not how do you use it ?

A.
No,cannot instantiate an interface. Generally, it contains abstract methods (except default and static methods
introduced in Java8), which are incomplete.

Still if try to instantiate an interface, a compile time error will be generated saying
“MyInterface is abstract; cannot be instantiated”.
B.

To access the members of an interface you need to implements it and provide implementation to all the abstract
methods of it.
what is Access Specifier?

# What is OOP ? Define each feature of java OOP.
A.
Object-oriented programming(OOP) is a computer programming model that organizes software design around data, or objects,
rather than functions and logic. An object can be defined as a data field that has unique attributes and behavior.
B.
Inheritance
When one object acquires all the properties and behaviors of a parent object, it is known as inheritance.
It provides code re-usability. It is used to achieve runtime polymorphism.


Polymorphism
If one task is performed in different ways, it is known as polymorphism. For example: to convince the customer
differently, to draw something, for example, shape, triangle, rectangle, etc.

In Java, we use method overloading and method overriding to achieve polymorphism.

Another example can be to speak something; for example, a cat speaks meow, dog barks woof, etc.

Abstraction
Hiding internal details and showing functionality is known as abstraction. For example phone call,
we don't know the internal processing.


In Java, we use abstract class and interface to achieve abstraction.


Encapsulation
Binding (or wrapping) code and data together into a single unit are known as encapsulation.
For example, a capsule, it is wrapped with different medicines.

A java class is the example of encapsulation. Java bean is the fully encapsulated class
because all the data members are private here.



# What is Java Package and which package is imported by default?
A.
A java package is a group of similar types of classes, interfaces and sub-packages.

Package in java can be categorized in two form, built-in package and user-defined package.

There are many built-in packages such as java, lang, awt, javax, swing, net, io, util, sql etc.

B.
java.lang package
Java compiler imports java. lang package internally by default.

# What is API? Name list of API that you have used so far.

API is the acronym for Application Programming Interface, which is a software intermediary that allows two applications
to talk to each other. Each time you use an app like Facebook, send an instant message,
or check the weather on your phone, you're using an API.


# Does java support multiple inheritance, explain why or why not?

No,java does not support multiple inheritance through class because of to avoid ambiguity error.
That's the reason behind this is to prevent ambiguity.
Consider a case where class B extends class A and Class C and both class A and C have the same method display().
Now java compiler cannot decide, which display method it should inherit. To prevent such situation,
multiple inheritances is not allowed in java.
But through the interface,multiple inheritance is possible in java.
One of the example of such problem is the diamond problem that occurs in multiple inheritance.


# What is method overloading and when it happens?
A.
If a class has multiple methods having same name but different in parameters, it is known as Method Overloading.
If we have to perform only one operation, having same name of the methods increases the readability of the program.

Overloading occurs when two or more methods in one class have the same method name but different parameters.


# Explain exceptions in java and how to handle it?
A.
An exception is an event, which occurs during the execution of a program,
that disrupts the normal flow of the program's instructions. When an error occurs within a method,
the method creates an object and hands it off to the runtime system.

JVM Exceptions − These are exceptions/errors that are exclusively or logically thrown by the JVM.
Examples: NullPointerException, ArrayIndexOutOfBoundsException, ClassCastException.

How to Handle an Exception:
1. a try block that encloses the code section which might throw an exception,
2. one or more catch blocks that handle the exception and.
3. a finally block which gets executed after the try block was successfully executed or a thrown exception was handled.


# What is static keyword in java? How it has been used in variables and methods ?

A.
The static keyword in Java is mainly used for memory management. The static keyword in Java is used to share the same
variable or method of a given class. The users can apply static keywords with variables, methods, blocks,
and nested classes. The static keyword belongs to the class than an instance of the class.
The static keyword is used for a constant variable or a method that is the same for every instance of a class.

The static keyword is a non-access modifier in Java that is applicable for the following :
Blocks
Variables
Methods
Classes

B.
1) Java static variable
If you declare any variable as static, it is known as a static variable.

The static variable can be used to refer to the common property of all objects (which is not unique for each object),
for example, the company name of employees, college name of students, etc.
The static variable gets memory only once in the class area at the time of class loading.
Advantages of static variable
It makes your program memory efficient (i.e., it saves memory).

Suppose there are 500 students in my college, now all instance data members will get memory each time
when the object is created. All students have its unique rollno and name, so instance data member is good in such case.
Here, "college" refers to the common property of all objects. If we make it static, this field will get the memory only once.

Java static property is shared to all objects.

2) Java static method
If you apply static keyword with any method, it is known as static method.

A static method belongs to the class rather than the object of a class.
A static method can be invoked without the need for creating an instance of a class.
A static method can access static data member and can change the value of it.

Restrictions for the static method
There are two main restrictions for the static method. They are:
The static method can not use non static data member or call non-static method directly.
this and super cannot be used in static context.

# ( SHEBLEY ) # Why is the Java main method static?
Ans) It is because the object is not required to call a static method.
If it were a non-static method, JVM creates an object first then call main() method that will lead the problem
of extra memory allocation.


# What is final and how it has been used variables and methods?
A.
Java final keyword is a non-access specifier that is used to restrict a class, variable, and method.
If we initialize a variable with the final keyword, then we cannot modify its value. If we declare a method as final,
then it cannot be overridden by any subclasses.

# What is final, finally and finalize?
A.
Final is a keyword and is used as access modifier in Java.
Finally is a block in Java used for Exception Handling.
Finalize is a method in Java used for Garbage Collection. Application.
Final in Java is used with variables, methods, and classes to set access permissions.

# What is a constructor ?
A.

A constructor in Java is a special method that is used to initialize objects.
The constructor is called when an object of a class is created.


There are two rules defined for the constructor.

Constructor name must be the same as its class name
A Constructor must have no explicit return type
A Java constructor cannot be abstract, static, final, and synchronized

There are two types of constructors in Java:

Default constructor (no-arg constructor)
Parameterized constructor


# Can we have multiple constructors in a class?

A.
There can be multiple constructors in a class. However, the parameter list of the constructors should not be same.
This is known as constructor overloading.

# If we don't have a constructor declared, what is called during the object creation?

A.
All classes have at least one constructor. If a class does not explicitly declare any,
the Java compiler automatically provides a no-argument constructor, called the default constructor.


# What is "this" keyword in java ?
A.
this keyword in Java is a reference variable that refers to the current object of a method or a constructor.
The main purpose of using this keyword in Java is to remove the confusion between class attributes and parameters that have same names.

Following are various uses of ‘this’ keyword in Java:

It can be used to refer instance variable of current class
It can be used to invoke or initiate current class constructor
It can be passed as an argument in the method call
It can be passed as argument in the constructor call
It can be used to return the current class instance


# What is "super" keyword in java? How many possible way can you use?

A.

The super keyword refers to superclass (parent) objects. It is used to call superclass methods,
and to access the superclass constructor. The most common use of the super keyword is to eliminate the confusion
between superclasses and subclasses that have methods with the same name.

It is used if parent class and child class have same fields. In the above example,
Animal and Dog both classes have a common property color. If we print color property,
it will print the color of current class by default.


# What is JVM stand for ?

A.

Java Virtual Machine, or JVM, loads, verifies and executes Java bytecode.
It is known as the interpreter or the core of Java programming language because it executes Java programming.

... to allow Java programs to run on any device or operating system (known as the "Write once, run anywhere" principle),
and to manage and optimize program memory.



# Is JVM platform independent?
A.

The JVM is not platform independent.

JVM is a virtual machine or a program that provides run-time environment in which java byte code can be executed.
JVM needs to be installed on your machine depending on what platform do you have and what version of it.
JVMs are available for many hardware and software platforms.
JVM, JRE and JDK are platform dependent because configuration of each OS differs.


# What version of java are you using?
A.

java version "11.0.13" 2021-10-19 LTS

[N.B.  Type "java -version" into the Command Prompt, then press Enter on your keyboard ]


# What is JAR stand for ?

A.
JAR stands for Java Archive.

JAR files are packaged with the ZIP file format, so you can use them for tasks such as
lossless data compression, archiving, decompression, and archive unpacking.


# What is the difference between JDK and JVM?

A.
JDK is primarily used for code execution and has prime functionality of development.
On other hand JRE is majorly responsible for creating environment for code execution.
JVM on other hand specifies all the implementations and responsible to provide these implementations to JRE.

JDk :

The full form of JDK is Java Development Kit.
JDK is a software development kit to develop applications in Java.
JDK is platform dependent.
It contains tools for developing, debugging, and monitoring java code.
It is the superset of JRE
The JDK enables developers to create Java programs that can be executed and run by the JRE and JVM.
JDK comes with the installer.

JVM:

The full form of JVM is Java Virtual Machine.
JVM executes Java byte code and provides an environment for executing it.
JVM is highly platform dependent.
Software development tools are not included in JVM.
JVM is a subset of JRE.
It is the Java platform component that executes source code.
JVM bundled in both software JDK and JRE.




# What is the difference between JVM and JRE?

A.

JRE is an environment, in order to execute any Java program locally.
JVM is where it's responsible for converting the Bytecode into machine specific code and makes java program
write-once-run-anywhere.

JVM:

The full form of JVM is Java Virtual Machine.
JVM executes Java byte code and provides an environment for executing it.
JVM is highly platform dependent.
Software development tools are not included in JVM.
JVM is a subset of JRE.
It is the Java platform component that executes source code.
JVM bundled in both software JDK and JRE.

JRE :

The full form of JRE is Java Runtime Environment.
It is a software bundle which provides Java class libraries with necessary components to run Java code.
JRE is also platform dependent.
It contains class libraries and other supporting files that JVM requires to execute the program.
It is the subset of JDK.
The JRE is the part of Java that creates the JVM.
JRE only contain environment to execute source code.



# What is compile time and run time?
A.
Compile time is the period when the programming code (such as C#, Java, C, Python) is converted to the machine code
(i.e. binary code). Runtime is the period of time when a program is running and generally occurs after compile time.


# What is heap?
A.

In Java, a heap is a chunk of memory which is shared among all threads.
In a heap, all class instances and the array is allocated. It is created when JVM starts-up.
An automatic storage management system reclaims heap. It may be of fixed and variable size.
It does not need to be contiguous.

The heap is divided into two parts (or generations):

1.Young Generation (or Young Space or Nursery)
2.Old Generation (or Old Space or Tenured)


# How java manage it's memory?

A.

In Java, memory management is the process of allocation and de-allocation of objects, called Memory management.
Java does memory management automatically. Java uses an automatic memory management system called a garbage collector.
Thus, we are not required to implement memory management logic in our application.

# What is the difference between String, StringBuffer and StringBuilder?

A.

1. String is immutable whereas StringBuffer and StringBuilder are mutable classes.
2. StringBuffer is thread-safe and synchronized whereas StringBuilder is not. That’s why StringBuilder is faster than StringBuffer.
3. String concatenation operator (+) internally uses StringBuffer or StringBuilder class.
4. For String manipulations in a non-multi threaded environment, we should use StringBuilder else use StringBuffer class.


# What is Singleton class?

A.

In object-oriented programming, a singleton class is a class that can have only one object (an instance of the class)
at a time. After the first time, if we try to instantiate the Singleton class, the new variable also points to the
first instance created. So whatever modifications we do to any variable inside the class through any instance,
affects the variable of the single instance created and is visible if we access that variable through any variable
of that class type defined.

Remember the key points while defining class as a singleton class that is while designing a singleton class:

1. Make a constructor private.
2. Write a static method that has the return type object of this singleton class. Here, the concept of Lazy initialization
is used to write this static method.


# What is Serialization and Deserialization?

A.
Serialization is a mechanism of converting the state of an object into a byte stream. Deserialization is the reverse
process where the byte stream is used to recreate the actual Java object in memory. This mechanism is used to persist
the object.

# when to use transient variable in java?

A.
Transient in Java is used to indicate that a field should not be part of the serialization process.
The modifier Transient can be applied to member variables of a class to turn off serialization on these member
variables. Every field that is marked as transient will not be serialized.



# Difference between while and do..while loop?

A.

while loop:

A while loop is a control flow statement that allows code to be executed repeatedly based on a given Boolean condition.
The while loop can be thought of as a repeating if statement.
Syntax :

while (boolean condition)
{
   loop statements...
}

do-while loop:

do while loop is similar to while loop with the only difference that it checks for the condition after executing
the statements, and therefore is an example of Exit Control Loop.

Syntax:

do
{
    statements..
}
while (condition);

i.e. While loop checks the condition first and then executes the statement(s), whereas do while loop will execute the
statement(s) at least once, then the condition is checked.


# What is Enum?
A.

An enum is a special "class" that represents a group of constants (unchangeable variables, like final variables).

To create an enum, use the enum keyword (instead of class or interface), and separate the constants with a comma.
Note that they should be in uppercase letters:

Example
enum Level {
  LOW,
  MEDIUM,
  HIGH
}


# What is Iterator?

A.

An Iterator is an object that can be used to loop through collections, like ArrayList and HashSet.
It is called an "iterator" because "iterating" is the technical term for looping.

To use an Iterator, must import it from the java.util package.


# Which one will take more memory, an int or Integer?

A.
int is a primitive data type and takes 32 bits(4 bytes) to store.
On other hand Integer is an object which takes 128 bits (16 bytes) to store its int value.


# Why is String Immutable in Java?

A.
The String is immutable in Java because of the security, synchronization and concurrency, caching, and class loading.
The reason of making string final is to destroy the immutability and to not allow others to extend it.
The String objects are cached in the String pool, and it makes the String immutable.



# What is constructor chaining in Java?

A.
Constructor chaining refers to the ability to call a constructor inside another constructor.
You can use a constructor chain either within the same class or even with another one.
For the latter, the constructor should be through inheritance from the super class.



# The difference between Serial and Parallel Garbage Collector?
A.
The only difference between serial and parallel garbage collector is that serial garbage collector uses a
single thread for garbage collection process while the parallel garbage collector uses multiple threads for
the garbage collection. Parallel GC can use multiple CPUs to speed up the application throughput.


# What is JIT stands for?
A.
The Just-In-Time (JIT) compiler is a component of the runtime environment that improves the performance of Java™
applications by compiling bytecodes to native machine code at run time.

In computing, just-in-time (JIT) compilation (also dynamic translation or run-time compilations) is a way of executing
computer code that involves compilation during execution of a program (at run time) rather than before execution.



# Explain Java Heap space and Garbage collection?
A.

Java objects reside in an area called the heap. The heap is created when the JVM starts up and may increase or decrease
in size while the application runs. When the heap becomes full, garbage is collected. During the garbage collection
objects that are no longer used are cleared, thus making space for new objects.


# Can you guarantee the garbage collection process?

A.

No, Garbage collection does not guarantee that a program will not run out of memory. The purpose of garbage collection
(GC) is to identify and discard objects that are no longer needed by a Java program, so that their resources can be
reclaimed and reused.


# What is the difference between stack and heap in Java?
A.

Java Heap Space is used throughout the application, but Stack is only used for the method
— or methods — currently running. The Heap Space contains all objects are created, but
Stack contains any reference to those objects. Objects stored in the Heap can be accessed throughout the application.

# What is reflection in java and why is it useful?
A.
Reflection is a feature in the Java programming language. It allows an executing Java program to examine or
"introspect" upon itself, and manipulate internal properties of the program. For example, it's possible for
a Java class to obtain the names of all its members and display them.


# what is multithreading in java?
A.
Multithreading is a Java feature that allows concurrent execution of two or more parts of a program for
maximum utilization of CPU. Each part of such program is called a thread. So, threads are light-weight
processes within a process. Threads can be created by using two mechanisms : Extending the Thread class.


# What is the use of synchronization in Java?
A.
Synchronization in java is the capability to control the access of multiple threads to any shared resource.
In the Multithreading concept, multiple threads try to access the shared resources
at a time to produce inconsistent results. The synchronization is necessary for reliable communication between threads.

# What is Framework?
A.
A Java framework is specific to the Java programming language, used as a platform for developing software applications
and Java programs. Java frameworks may include predefined classes and functions used to process, input,
and manage hardware devices, as well as interact with system software.


# What are the testing Framework available in java?
A.
Best Java Testing Frameworks are available in java :

1. JBehave.
2. JUnit.
3. Serenity.
4. TestNG.
5. Selenide.
6. Gauge.
7. Geb.
8. Spock.


# Difference between jUnit and testNG?

A.

Differences between JUnit and TestNG :

TestNG is a testing framework that was developed by Cédric Beust.
JUnit is an open-source framework used to trigger and write tests.
TestNG is a Java-based framework that is an upgraded option for running tests.
JUnit does not support to run parallel tests.

//or (Shebley)

So, Differences basis of between JUnit and TestNG :

Developed by :
1. JUnit was developed by Kent Beck, David Saff, Erich Gamma. Erich Gamma, and Kris Vasudevan.
2. TestNG is a testing framework that was developed by Cédric Beust.

Open-Source :
1. JUnit is an open-source framework used to trigger and write tests.
2. TestNG is a Java-based framework that is an upgraded option for running tests.

Parallel test Runs :
1. JUnit does not support to run parallel tests.
2. TestNG can run parallel tests.

Supports Annotation :
1. It does not support advanced annotation.
2. It supports advanced annotation.

Dependency tests :
1. The dependency tests are missing in JUnit.
2. Dependency tests are present in TestNG.

Grouping tests :
1. Running tests need a certain dependency on JUnit.
2. Tests can be grouped together and run parallel.

Ease of Use :
1. Running tests need a certain dependency on JUnit.
2. Writing tests and configuring them is easy in TestNG than JUnit.


# What are the dependencies for this project?

A.
   .Json
   .JUnit4.13
   .poi-bin-5.2.2
   .auxiliary
   .mongo-java-driver-3.4.0


# what is dependency injection in java?

A.
Dependency injection enables you to turn regular Java classes into managed objects and to inject them
into any other managed object. Using dependency injection, your code can declare dependencies on any managed object.



# What is static binding and dynamic binding?
A.

When type of the object is determined at compiled time(by the compiler), it is known as static binding.
If there is any private, final or static method in a class, there is static binding.

Example of static binding
class Dog{
 private void eat(){System.out.println("dog is eating...");}

 public static void main(String args[]){
  Dog d1=new Dog();
  d1.eat();
 }
}


When type of the object is determined at run-time, it is known as dynamic binding.

Example of dynamic binding
class Animal{
 void eat(){System.out.println("animal is eating...");}
}

class Dog extends Animal{
 void eat(){System.out.println("dog is eating...");}

 public static void main(String args[]){
  Animal a=new Dog();
  a.eat();
 }
}









